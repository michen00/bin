#!/bin/bash

set -e

SCRIPT_NAME=$(basename "$0")
DEFAULT_FILE=".git-blame-ignore-revs"
INCLUDE_SUMMARY=true

HELP=$(
	cat <<EOF
Usage: $SCRIPT_NAME [HASH] [FILE]

Adds the given Git commit hash to a specified file (default: $DEFAULT_FILE).
If HASH is not provided, the last commit hash is used.

Options:
  HASH          Git commit hash to add. If omitted, uses the last commit.
  FILE          File to update. Defaults to "$DEFAULT_FILE".
  --no-summary  Do not include the commit summary in the file.
  -h, --help    Show this help message and exit.

Examples:
  $SCRIPT_NAME                     # Use last commit hash, update default file
  $SCRIPT_NAME abc1234             # Use given hash, update default file
  $SCRIPT_NAME abc1234 custom.txt  # Use given hash, update custom file
  $SCRIPT_NAME --no-summary        # Use last commit hash, omit summary
EOF
)

# Parse arguments
POSITIONAL=()
while [[ $# -gt 0 ]]; do
	case "$1" in
	-h | --help)
		echo "$HELP"
		exit 0
		;;
	--no-summary)
		INCLUDE_SUMMARY=false
		shift
		;;
	*)
		POSITIONAL+=("$1")
		shift
		;;
	esac
done
set -- "${POSITIONAL[@]}"

HASH_ARG=${1:-}
FILE=${2:-$DEFAULT_FILE}

if [ ! -d .git ]; then
	echo "This script must be run in the root of a Git repository."
	exit 1
fi

if [ -z "$HASH_ARG" ]; then
	echo "Getting the last commit hash..."
	HASH_ENTRY=$(git log -1 --pretty=format:"%H" 2>/dev/null || echo)
	if [ -z "$HASH_ENTRY" ]; then
		echo "No prior commits found. Please make an initial commit before running this script."
		exit 1
	fi
else
	HASH_ENTRY="$HASH_ARG"
fi

if ! git cat-file -e "$HASH_ENTRY" 2>/dev/null; then
	echo "Invalid commit hash: $HASH_ENTRY"
	exit 1
fi
HASH_ENTRY=$(git rev-parse "$HASH_ENTRY")

SHORT_HASH=$(echo "$HASH_ENTRY" | cut -c 1-7)

CREATE_MODE=0
if [ -f "$FILE" ]; then
	if grep -qE "^\s*$SHORT_HASH" "$FILE"; then
		echo "Hash already exists in $FILE. Skipping."
		exit 0
	fi
else
	echo "Creating $FILE with commit hash."
	CREATE_MODE=1
fi

if git status --short "$FILE" | grep -q "^[ MADRCU?]"; then
	echo "The file $FILE has unstaged changes."
	printf "Are you sure you want to proceed (y/n)? "
	read -r confirm
	confirm=${confirm:-n}
	case "$confirm" in
	[yY][eE][sS] | [yY]) ;;
	*)
		echo "Aborted."
		exit 1
		;;
	esac
fi

STASHED=false
if [ -n "$(git diff --cached)" ]; then
	echo "There are staged changes. Stashing them temporarily..."
	git stash push -k -m "Temporary stash for $SCRIPT_NAME"
	STASHED=true
	echo "Staged changes stashed."
fi

{
	if [[ $INCLUDE_SUMMARY == true ]]; then
		SUMMARY=$(git log -1 --format=%s "$HASH_ENTRY" 2>/dev/null || echo "summary unavailable")
		HASH_ENTRY="$HASH_ENTRY  # $SUMMARY"
	fi
	echo "$HASH_ENTRY" >>"$FILE"
	git add "$FILE"
	COMMIT_MSG="docs(blame): ignore $SHORT_HASH"

	if [[ $CREATE_MODE -eq 1 && ${#FILE} -lt 38 ]]; then
		COMMIT_MSG="docs: create $FILE"
		if [[ ${#COMMIT_MSG} -lt 44 ]]; then
			COMMIT_MSG="docs(blame): create $FILE"
		else
			if [[ ${#COMMIT_MSG} -lt 38 ]]; then
				COMMIT_MSG="$COMMIT_MSG with $SHORT_HASH"
			fi
		fi
	fi

	git commit --no-verify -m "$COMMIT_MSG"
	echo "Successfully updated and committed $FILE."
} || {
	echo "Failed to update $FILE. Resolve manually."
	if [ "$STASHED" = true ]; then git stash pop || echo "Failed to apply stashed changes."; fi
	exit 1
}

if [ "$STASHED" = true ]; then
	echo "Reapplying stashed changes..."
	git stash pop || {
		echo "Failed to apply stashed changes. Resolve manually."
		exit 1
	}
fi
